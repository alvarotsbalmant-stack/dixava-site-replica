// Sistema centralizado de c√≥digos para especifica√ß√µes de produtos
// Mapeia c√≥digos para emojis e nomes de categorias

export interface SpecificationCodeMapping {
  code: string;
  emoji: string;
  categoryName: string;
  description: string;
}

export const SPECIFICATION_CODES: Record<string, SpecificationCodeMapping> = {
  // Especifica√ß√µes t√©cnicas b√°sicas
  'TECH': {
    code: 'TECH',
    emoji: '‚öôÔ∏è',
    categoryName: 'Especifica√ß√µes T√©cnicas',
    description: 'Especifica√ß√µes t√©cnicas gerais do produto'
  },
  'PERF': {
    code: 'PERF',
    emoji: 'üöÄ',
    categoryName: 'Performance',
    description: 'Especifica√ß√µes relacionadas √† performance'
  },
  'STORAGE': {
    code: 'STORAGE',
    emoji: 'üíæ',
    categoryName: 'Armazenamento',
    description: 'Especifica√ß√µes de armazenamento e mem√≥ria'
  },
  'DISPLAY': {
    code: 'DISPLAY',
    emoji: 'üñ•Ô∏è',
    categoryName: 'Display',
    description: 'Especifica√ß√µes de tela e display'
  },
  'AUDIO': {
    code: 'AUDIO',
    emoji: 'üîä',
    categoryName: '√Åudio',
    description: 'Especifica√ß√µes de √°udio e som'
  },
  'CONNECT': {
    code: 'CONNECT',
    emoji: 'üîå',
    categoryName: 'Conectividade',
    description: 'Especifica√ß√µes de conectividade e portas'
  },
  'POWER': {
    code: 'POWER',
    emoji: 'üîã',
    categoryName: 'Energia',
    description: 'Especifica√ß√µes de energia e consumo'
  },
  'DESIGN': {
    code: 'DESIGN',
    emoji: 'üé®',
    categoryName: 'Design',
    description: 'Especifica√ß√µes de design e apar√™ncia'
  },
  'SIZE': {
    code: 'SIZE',
    emoji: 'üìê',
    categoryName: 'Dimens√µes',
    description: 'Especifica√ß√µes de tamanho e peso'
  },
  'COMPAT': {
    code: 'COMPAT',
    emoji: 'üîó',
    categoryName: 'Compatibilidade',
    description: 'Especifica√ß√µes de compatibilidade'
  },
  'FEATURE': {
    code: 'FEATURE',
    emoji: '‚ú®',
    categoryName: 'Recursos',
    description: 'Recursos e funcionalidades especiais'
  },
  'CTRL': {
    code: 'CTRL',
    emoji: 'üéÆ',
    categoryName: 'Controles',
    description: 'Especifica√ß√µes de controles e input'
  },
  'NET': {
    code: 'NET',
    emoji: 'üåê',
    categoryName: 'Rede',
    description: 'Especifica√ß√µes de rede e conectividade online'
  },
  'SEC': {
    code: 'SEC',
    emoji: 'üîí',
    categoryName: 'Seguran√ßa',
    description: 'Especifica√ß√µes de seguran√ßa e prote√ß√£o'
  },
  'SOFT': {
    code: 'SOFT',
    emoji: 'üíø',
    categoryName: 'Software',
    description: 'Especifica√ß√µes de software e sistema operacional'
  },
  'WARRANTY': {
    code: 'WARRANTY',
    emoji: 'üõ°Ô∏è',
    categoryName: 'Garantia',
    description: 'Informa√ß√µes de garantia e suporte'
  },
  'PACK': {
    code: 'PACK',
    emoji: 'üì¶',
    categoryName: 'Conte√∫do da Embalagem',
    description: 'Itens inclusos na embalagem'
  },
  'REQ': {
    code: 'REQ',
    emoji: 'üìã',
    categoryName: 'Requisitos',
    description: 'Requisitos m√≠nimos do sistema'
  },
  'RATING': {
    code: 'RATING',
    emoji: '‚≠ê',
    categoryName: 'Classifica√ß√£o',
    description: 'Classifica√ß√µes et√°rias e ratings'
  },
  'GENRE': {
    code: 'GENRE',
    emoji: 'üéØ',
    categoryName: 'G√™nero',
    description: 'G√™nero e categoria do produto'
  }
};

// Fun√ß√£o para obter o mapeamento por c√≥digo
export const getSpecificationByCode = (code: string): SpecificationCodeMapping | null => {
  return SPECIFICATION_CODES[code] || null;
};

// Fun√ß√£o para obter todos os c√≥digos dispon√≠veis
export const getAllSpecificationCodes = (): SpecificationCodeMapping[] => {
  return Object.values(SPECIFICATION_CODES);
};

// Fun√ß√£o para obter c√≥digo por emoji (√∫til para migra√ß√£o)
export const getCodeByEmoji = (emoji: string): string | null => {
  const entry = Object.values(SPECIFICATION_CODES).find(spec => spec.emoji === emoji);
  return entry?.code || null;
};

// Fun√ß√£o para validar se um c√≥digo existe
export const isValidSpecificationCode = (code: string): boolean => {
  return code in SPECIFICATION_CODES;
};

// Fun√ß√£o para extrair c√≥digo de uma string de categoria (para compatibilidade)
export const extractCodeFromCategory = (category: string): { code: string | null; cleanCategory: string } => {
  // Procura por padr√£o [C√ìDIGO] no in√≠cio da string
  const codeMatch = category.match(/^\[([A-Z_]+)\]\s*/);
  
  if (codeMatch) {
    const code = codeMatch[1];
    const cleanCategory = category.replace(codeMatch[0], '').trim();
    
    if (isValidSpecificationCode(code)) {
      return { code, cleanCategory };
    }
  }
  
  return { code: null, cleanCategory: category };
};

// Fun√ß√£o para formatar categoria com c√≥digo (para exibi√ß√£o no template)
export const formatCategoryWithCode = (code: string): string => {
  const spec = getSpecificationByCode(code);
  if (!spec) return code;
  
  return `[${code}] ${spec.emoji} ${spec.categoryName}`;
};
// Utility para testar e diagnosticar o processamento de especifica√ß√µes customizadas

import { supabase } from '@/integrations/supabase/client';

export interface TestSpecification {
  category: string;
  label: string;
  value: string;
  icon?: string;
  highlight?: boolean;
}

export interface DiagnosticResult {
  success: boolean;
  message: string;
  details: any;
  specificationsSaved?: any[];
  categoriesFound?: string[];
}

export const runSpecificationDiagnostic = async (): Promise<DiagnosticResult> => {
  console.log('[DIAGNOSTIC TEST] Iniciando teste de especifica√ß√µes...');
  
  // Dados de teste que deveriam funcionar
  const testSpecs: TestSpecification[] = [
    {
      category: "Informa√ß√µes Gerais",
      label: "Desenvolvedora",
      value: "Test Studio",
      icon: "üéÆ",
      highlight: false
    },
    {
      category: "Especifica√ß√µes T√©cnicas", 
      label: "Resolu√ß√£o",
      value: "4K",
      icon: "üì∫",
      highlight: true
    },
    {
      category: "Multiplayer",
      label: "M√°ximo de Jogadores",
      value: "4 jogadores",
      icon: "üë•",
      highlight: false
    }
  ];

  try {
    // Criar produto de teste
    const productData = {
      name: `TESTE ESPECIFICA√á√ïES - ${Date.now()}`,
      description: 'Produto para teste de especifica√ß√µes customizadas',
      price: 99.99,
      product_type: 'simple' as const,
      technical_specs: {
        custom_specifications: testSpecs as any
      } as any
    };

    console.log('[DIAGNOSTIC TEST] Criando produto de teste:', productData);

    const { data: product, error: productError } = await supabase
      .from('products')
      .insert([productData])
      .select()
      .single();

    if (productError) {
      return {
        success: false,
        message: 'Erro ao criar produto de teste',
        details: productError
      };
    }

    console.log('[DIAGNOSTIC TEST] Produto criado:', product);

    // Aguardar processamento das especifica√ß√µes
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Verificar especifica√ß√µes salvas
    const { data: specs, error: specsError } = await supabase
      .from('product_specifications')
      .select('*')
      .eq('product_id', product.id)
      .order('category', { ascending: true })
      .order('order_index', { ascending: true });

    if (specsError) {
      return {
        success: false,
        message: 'Erro ao buscar especifica√ß√µes salvas',
        details: specsError
      };
    }

    console.log('[DIAGNOSTIC TEST] Especifica√ß√µes encontradas:', specs);

    // Analisar resultados
    const categoriesFound = specs ? [...new Set(specs.map(s => s.category))] : [];
    const expectedCategories = testSpecs.map(s => s.category);
    
    const analysis = {
      expectedSpecs: testSpecs.length,
      foundSpecs: specs?.length || 0,
      expectedCategories,
      categoriesFound,
      categoriesMatch: categoriesFound.length === new Set(expectedCategories).size,
      allSpecsFound: testSpecs.every(testSpec => 
        specs?.some(savedSpec => 
          savedSpec.label === testSpec.label && 
          savedSpec.value === testSpec.value
        )
      )
    };

    // Limpar produto de teste
    await supabase
      .from('products')
      .delete()
      .eq('id', product.id);

    return {
      success: analysis.allSpecsFound && analysis.categoriesMatch,
      message: analysis.allSpecsFound && analysis.categoriesMatch 
        ? 'Teste passou! Especifica√ß√µes est√£o sendo processadas corretamente.'
        : 'Teste falhou! H√° problemas no processamento das especifica√ß√µes.',
      details: analysis,
      specificationsSaved: specs,
      categoriesFound
    };

  } catch (error) {
    console.error('[DIAGNOSTIC TEST] Erro durante teste:', error);
    return {
      success: false,
      message: 'Erro interno durante teste',
      details: error
    };
  }
};

export const testSpecificationValidation = () => {
  console.log('[DIAGNOSTIC TEST] Testando valida√ß√£o de categorias...');
  
  // Categorias de teste mais abrangentes incluindo emojis e casos extremos
  const testCategories = [
    "Informa√ß√µes Gerais",
    "üìã Informa√ß√µes Gerais",
    "Especifica√ß√µes T√©cnicas", 
    "‚öôÔ∏è Especifica√ß√µes T√©cnicas",
    "üíæ Armazenamento e Instala√ß√£o",
    "üåê Recursos Online",
    "üéÆ Jogabilidade",
    "üì∫ V√≠deo e Gr√°ficos",
    "üîß Hardware",
    "üéØ Performance",
    "‚ö° Performance",
    "üíª Sistema",
    "üé® Personaliza√ß√£o",
    "üîä √Åudio/V√≠deo",
    "üéß √Åudio",
    "üì± Compatibilidade",
    "‚≠ê Avalia√ß√µes",
    "‚ú® Recursos Especiais",
    "üöÄ Novidades",
    "üíé Premium",
    "üèÜ Conquistas",
    "üî• Destaques",
    "üë• Multiplayer",
    "Hardware üîß",
    "Storage & Memory",
    "Audio/Video üéß",
    "invalid@category!",
    "categoria com s√≠mbolos $%#",
    "",
    null,
    undefined,
    "   espa√ßos extras   ",
    "categoria muito longa que excede o limite de cinquenta caracteres estabelecido"
  ];

  const results = testCategories.map(category => {
    // Replicar l√≥gica de valida√ß√£o atualizada
    if (!category || typeof category !== 'string') {
      return { input: category, output: 'Informa√ß√µes Gerais', reason: 'null or not string - fallback applied' };
    }
    
    const cleanCategory = category.trim().slice(0, 50);
    if (!cleanCategory) {
      return { input: category, output: 'Informa√ß√µes Gerais', reason: 'empty after cleaning - fallback applied' };
    }
    
    // Usar o mesmo pattern expandido
    const validPattern = /^[\p{L}\p{N}\p{M}\p{S}\p{P}\s\-_()&üìã‚öôÔ∏èüíæüåêüéÆüì∫üîßüéØ‚ö°üíªüé®üîäüéßüì±‚≠ê‚ú®üöÄüíéüèÜüî•üë•üéØüî•üí∞üè™üé™üé≠üé®üéµüé¨üé§üé∏üéπü•Åüé∫üé∑üéªüé™üé†üé°üé¢üé≥üéØüé±üé≤üÉèüé¥üÄÑüéØ]+$/u;
    const isValid = validPattern.test(cleanCategory);
    
    return {
      input: category,
      cleaned: cleanCategory,
      output: isValid ? cleanCategory : 'Informa√ß√µes Gerais',
      reason: isValid ? 'valid' : 'invalid pattern - fallback applied',
      isValid
    };
  });

  console.log('[DIAGNOSTIC TEST] Resultados da valida√ß√£o:', results);
  
  // Contar estat√≠sticas
  const stats = {
    total: results.length,
    valid: results.filter(r => r.isValid).length,
    fallback: results.filter(r => !r.isValid).length,
    withEmojis: results.filter(r => r.isValid && /[\p{S}]/u.test(r.cleaned || '')).length
  };
  
  console.log('[DIAGNOSTIC TEST] Estat√≠sticas:', stats);
  return { results, stats };
};